{"version":3,"file":"static/webpack/static/development/pages/material-ui.js.d78a5f65ea1279dda8be.hot-update.js","sources":["webpack:///./node_modules/@babel/runtime-corejs2/core-js/number/is-nan.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/number/parse-int.js","webpack:///./node_modules/core-js/library/fn/number/is-nan.js","webpack:///./node_modules/core-js/library/fn/number/parse-int.js","webpack:///./node_modules/core-js/library/modules/es6.number.is-nan.js","webpack:///./node_modules/core-js/library/modules/es6.number.parse-int.js","webpack:///./pages/material-ui/index.js"],"sourcesContent":["module.exports = require(\"core-js/library/fn/number/is-nan\");","module.exports = require(\"core-js/library/fn/number/parse-int\");","require('../../modules/es6.number.is-nan');\nmodule.exports = require('../../modules/_core').Number.isNaN;\n","require('../../modules/es6.number.parse-int');\nmodule.exports = require('../../modules/_core').Number.parseInt;\n","// 20.1.2.4 Number.isNaN(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {\n  isNaN: function isNaN(number) {\n    // eslint-disable-next-line no-self-compare\n    return number != number;\n  }\n});\n","var $export = require('./_export');\nvar $parseInt = require('./_parse-int');\n// 20.1.2.13 Number.parseInt(string, radix)\n$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Rifm } from 'rifm';\nimport { TextField } from '@material-ui/core';\n\nconst integerAccept = /\\d+/g;\n\nconst parseInteger = string => (string.match(integerAccept) || []).join('');\n\nconst formatInteger = string => {\n  const parsed = parseInteger(string);\n  const number = Number.parseInt(parsed, 10);\n  if (Number.isNaN(number)) {\n    return '';\n  }\n  return number.toLocaleString('en');\n};\n\nconst Example = () => {\n  const [number, setNumber] = React.useState('');\n\n  return (\n    <React.Fragment>\n      <div>Number format with material-ui text field</div>\n      <Rifm format={parseInteger} value={number} onChange={setNumber}>\n        {({ value, onChange }) => (\n          <TextField\n            type=\"tel\"\n            variant=\"filled\"\n            label=\"Number input\"\n            placeholder=\"Enter number...\"\n            value={value}\n            onChange={onChange}\n          />\n        )}\n      </Rifm>\n    </React.Fragment>\n  );\n};\n\nif (typeof document !== 'undefined') {\n  const root = document.getElementById('root');\n  if (root) {\n    ReactDOM.render(<Example />, root);\n  }\n}\n\nexport default Example;\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AACA;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAaA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}