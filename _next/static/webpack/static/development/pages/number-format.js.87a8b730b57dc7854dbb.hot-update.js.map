{"version":3,"file":"static/webpack/static/development/pages/number-format.js.87a8b730b57dc7854dbb.hot-update.js","sources":["webpack:///./pages/number-format/index.js"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Rifm } from 'rifm';\n\nconst renderInput = ({ value, onChange }) => (\n  // type=number is not allowed\n  <input\n    type=\"tel\"\n    style={{ textAlign: 'right' }}\n    value={value}\n    onChange={onChange}\n  />\n);\n\n// To prevent parseInt overflow you can use `maxLength` on input field\n// or write your own numberFormat.\n\nconst integerAccept = /\\d+/g;\n\nconst parseInteger = string => (string.match(integerAccept) || []).join('');\n\nconst formatInteger = string => {\n  const parsed = parseInteger(string);\n  const number = Number.parseInt(parsed, 10);\n  if (Number.isNaN(number)) {\n    return '';\n  }\n  return number.toLocaleString('en');\n};\n\nconst negativeAccept = /[\\d-]+/g;\n\nconst parseNegative = string => (string.match(negativeAccept) || []).join('');\n\nconst formatNegative = string => {\n  const parsed = parseNegative(string);\n  if (parsed === '-') {\n    return '-';\n  }\n  const number = Number.parseInt(parsed, 10);\n  if (Number.isNaN(number)) {\n    return '';\n  }\n  return number.toLocaleString('en');\n};\n\nconst numberAccept = /[\\d.]+/g;\n\nconst parseNumber = string => (string.match(numberAccept) || []).join('');\n\nconst floor = (number, scale) => {\n  const ratio = 10 ** scale;\n  return Math.floor(number * ratio) / ratio;\n};\n\nconst formatNumber = (string, scale, fixed) => {\n  const parsed = parseNumber(string);\n  const number = Number.parseFloat(parsed);\n  if (Number.isNaN(number)) {\n    return '';\n  }\n  // floor to prevent incrementing rounded number\n  const formatted = floor(number, scale).toLocaleString('de-CH', {\n    minimumFractionDigits: fixed ? scale : 0,\n    maximumFractionDigits: scale,\n  });\n  if (!formatted.includes('.') && parsed.includes('.')) {\n    const [, tail] = parsed.split('.');\n    return formatted + '.' + tail.slice(0, scale);\n  }\n  return formatted;\n};\n\n// 2 in m^2 should not be a number to not match regexp\nconst formatMeters = string => formatNumber(string, 2, false) + ' m\\u00B2';\n\nconst formatCurrency = string => '$' + formatNumber(string, 2, false);\n\nconst Example = () => {\n  const [integer, setInteger] = React.useState('12345');\n  const [negative, setNegative] = React.useState('12345');\n  const [variableFloat, setVariableFloat] = React.useState('12345');\n  const [fixedFloat, setFixedFloat] = React.useState('12345');\n\n  return (\n    <React.Fragment>\n      <div>Integer number format: {integer}</div>\n      <Rifm\n        refuse={/[^\\d]+/g}\n        format={formatInteger}\n        value={formatInteger(integer)}\n        onChange={value => setInteger(parseInteger(value))}\n      >\n        {renderInput}\n      </Rifm>\n\n      <div>Negative number format: {negative}</div>\n      <Rifm\n        refuse={/[^\\d-]+/g}\n        format={formatNegative}\n        value={formatNegative(negative)}\n        onChange={value => setNegative(parseNegative(value))}\n      >\n        {renderInput}\n      </Rifm>\n\n      <div>Number with fractional part: {fixedFloat}</div>\n      <Rifm\n        refuse={/[^\\d.]+/g}\n        format={v => formatNumber(v, 2, true)}\n        value={formatNumber(fixedFloat, 2, true)}\n        onChange={value => setFixedFloat(parseNumber(value))}\n      >\n        {renderInput}\n      </Rifm>\n\n      <div>Number with variable fractional part: {variableFloat}</div>\n      <Rifm\n        refuse={/[^\\d.]+/g}\n        format={v => formatNumber(v, 2, false)}\n        value={formatNumber(variableFloat, 2, false)}\n        onChange={value => setVariableFloat(parseNumber(value))}\n      >\n        {renderInput}\n      </Rifm>\n\n      <div>Square meters number: {variableFloat}</div>\n      <Rifm\n        refuse={/[^\\d.]+/g}\n        format={formatMeters}\n        value={formatMeters(variableFloat)}\n        onChange={value => setVariableFloat(parseNumber(value))}\n      >\n        {renderInput}\n      </Rifm>\n\n      <div>Currency number: {variableFloat}</div>\n      <Rifm\n        // $ need to be in regexp to prevent cursor jumping on backspace\n        refuse={/[^\\d.$]+/g}\n        format={formatCurrency}\n        value={formatCurrency(variableFloat)}\n        onChange={value => setVariableFloat(parseNumber(value))}\n      >\n        {renderInput}\n      </Rifm>\n    </React.Fragment>\n  );\n};\n\nif (typeof document !== 'undefined') {\n  const root = document.getElementById('root');\n  if (root) {\n    ReactDOM.render(<Example />, root);\n  }\n}\n\nexport default Example;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAWA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}