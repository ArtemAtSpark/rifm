{"version":3,"file":"static/webpack/static/development/pages/enforcement.js.dc320e3ba67b15d47685.hot-update.js","sources":["webpack:///./pages/enforcement/index.js"],"sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Rifm } from 'rifm';\n\nconst Example = () /*:React.Node*/ => {\n  const [number, setNumber] = React.useState('');\n  const [lowercase, setLowercase] = React.useState('');\n  const [uppercase, setUppercase] = React.useState('');\n  const [capitalized, setCapitalized] = React.useState('');\n  const [latinLetters, setLatinLetters] = React.useState('');\n  const [comment, setComment] = React.useState('');\n\n  return (\n    <Grid>\n      <div>\n        <div>Mandatory dot (even if user enters comma) as floating point</div>\n        <Rifm\n          accept={/[\\d.,]+/g}\n          // allow only one floating point\n          format={v => (v.match(/\\d+[.,]?\\d*/) || []).join('')}\n          replace={v => v.replace(',', '.')}\n          value={number}\n          onChange={setNumber}\n        >\n          {renderInput}\n        </Rifm>\n      </div>\n\n      <div>\n        <div>Lower case</div>\n        <Rifm\n          accept={/./g}\n          format={v => v}\n          replace={v => v.toLowerCase()}\n          value={lowercase}\n          onChange={setLowercase}\n        >\n          {renderInput}\n        </Rifm>\n      </div>\n\n      <div>\n        <div>Upper case</div>\n        <Rifm\n          accept={/./g}\n          format={v => v}\n          replace={v => v.toUpperCase()}\n          value={uppercase}\n          onChange={setUppercase}\n        >\n          {renderInput}\n        </Rifm>\n      </div>\n\n      <div>\n        <div>Capital first letter</div>\n        <Rifm\n          accept={/./g}\n          format={v => v}\n          replace={v => v.slice(0, 1).toUpperCase() + v.slice(1).toLowerCase()}\n          value={capitalized}\n          onChange={setCapitalized}\n        >\n          {renderInput}\n        </Rifm>\n      </div>\n\n      <div>\n        <div>Allow latin letters only</div>\n        <Rifm\n          accept={/[a-zA-Z]/g}\n          format={v => (v.match(/[a-zA-Z]/g) || []).join('')}\n          value={latinLetters}\n          onChange={setLatinLetters}\n        >\n          {renderInput}\n        </Rifm>\n      </div>\n\n      <div>\n        <div>Leave a comment about Rifm</div>\n        <Rifm\n          accept={/./g}\n          format={v => v}\n          replace={v =>\n            'Rifm is the best mask and formatting library. I love it! '\n              .repeat(20)\n              .slice(0, v.length)\n          }\n          value={comment}\n          onChange={setComment}\n        >\n          {renderInput}\n        </Rifm>\n      </div>\n    </Grid>\n  );\n};\n\nconst renderInput = ({ value, onChange }) => (\n  <input\n    style={{\n      width: '100%',\n      height: 32,\n      fontSize: 'inherit',\n      boxSizing: 'border-box',\n    }}\n    value={value}\n    onChange={onChange}\n  />\n);\n\nconst Grid = ({ children }) => {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        padding: 16,\n        gap: 24,\n        gridTemplateColumns: 'repeat(auto-fit, minmax(240px, 1fr))',\n        alignItems: 'end',\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nif (typeof document !== 'undefined') {\n  const root = document.getElementById('root');\n  if (root) {\n    ReactDOM.render(<Example />, root);\n  }\n}\n\nexport default Example;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAYA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}