{"version":3,"file":"static/webpack/static/development/pages/date-format.js.3a7596ee46de09c5a853.hot-update.js","sources":["webpack:///./pages/date-format/index.js"],"sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Rifm } from 'rifm';\n\nconst parseDigits = string => (string.match(/\\d+/g) || []).join('');\n\nconst formatDate = string => {\n  const digits = parseDigits(string);\n  const chars = digits.split('');\n  return chars\n    .reduce(\n      (r, v, index) => (index === 2 || index === 4 ? `${r}-${v}` : `${r}${v}`),\n      ''\n    )\n    .substr(0, 10);\n};\n\nconst formatDateOther = string => {\n  const res = formatDate(string);\n\n  if (string.endsWith('-')) {\n    if (res.length === 2) {\n      return `${res}-`;\n    }\n\n    if (res.length === 5) {\n      return `${res}-`;\n    }\n  }\n  return res;\n};\n\nconst formatDateWithMask = string => {\n  const digits = parseDigits(string);\n  const days = digits.slice(0, 2).padEnd(2, '_');\n  const months = digits.slice(2, 4).padEnd(2, '_');\n  const years = digits.slice(4, 8).padEnd(4, '_');\n  return `${days}-${months}-${years}`;\n};\n\nconst Example = () /*:React.Node*/ => {\n  const [formatted, setFormatted] = React.useState('18-08-1978');\n  const [formattedA, setFormattedA] = React.useState('');\n  const [masked, setMasked] = React.useState('');\n\n  return (\n    <Grid>\n      <div>\n        <div>Date format</div>\n        <Rifm\n          accept={/\\d/g}\n          replace={v => 10 <= v.length}\n          format={formatDate}\n          value={formatDate(formatted)}\n          onChange={setFormatted}\n        >\n          {renderInput}\n        </Rifm>\n      </div>\n\n      <div>\n        <div>Date format another</div>\n        <Rifm\n          accept={/[\\d-]+/g}\n          replace={v => 10 <= v.length}\n          format={formatDateOther}\n          value={formatDateOther(formattedA)}\n          onChange={setFormattedA}\n        >\n          {renderInput}\n        </Rifm>\n      </div>\n\n      <div>\n        <div>Date format with mask</div>\n        <Rifm\n          accept={/[\\d]/g}\n          format={formatDateWithMask}\n          value={formatDateWithMask(masked)}\n          onChange={setMasked}\n        >\n          {renderInput}\n        </Rifm>\n      </div>\n    </Grid>\n  );\n};\n\nconst renderInput = ({ value, onChange }) => (\n  <input\n    type=\"tel\"\n    placeholder=\"dd-mm-yyyy\"\n    style={{\n      width: '100%',\n      height: 32,\n      fontSize: 'inherit',\n      boxSizing: 'border-box',\n    }}\n    value={value}\n    onChange={onChange}\n  />\n);\n\nconst Grid = ({ children }) => {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        padding: 16,\n        gap: 24,\n        gridTemplateColumns: 'repeat(auto-fit, minmax(240px, 1fr))',\n        alignItems: 'end',\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nif (typeof document !== 'undefined') {\n  const root = document.getElementById('root');\n  if (root) {\n    ReactDOM.render(<Example />, root);\n  }\n}\n\nexport default Example;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAcA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}