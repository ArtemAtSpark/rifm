{"version":3,"file":"static/webpack/static/development/pages/case-enforcement.js.5bca9c9823fdb5c00984.hot-update.js","sources":["webpack:///./pages/case-enforcement/index.js"],"sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Rifm } from 'rifm';\n\nconst Grid = ({ children }) => {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        padding: 16,\n        gap: 16,\n        gridTemplateColumns: 'repeat(auto-fit, minmax(240px, 1fr))',\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst renderInput = ({ value, onChange }) => (\n  <input value={value} onChange={onChange} />\n);\n\nconst Example = () => {\n  const [lowercase, setLowercase] = React.useState('');\n  const [uppercase, setUppercase] = React.useState('');\n  const [capitalized, setCapitalized] = React.useState('');\n  const [latinLetters, setLatinLetters] = React.useState('');\n\n  return (\n    <Grid>\n      <div>\n        <div>Lower case</div>\n        <Rifm\n          accept={/./g}\n          format={v => v.toLowerCase()}\n          value={lowercase}\n          onChange={setLowercase}\n        >\n          {renderInput}\n        </Rifm>\n      </div>\n\n      <div>\n        <div>Upper case</div>\n        <Rifm\n          accept={/./g}\n          format={v => v.toUpperCase()}\n          value={uppercase}\n          onChange={setUppercase}\n        >\n          {renderInput}\n        </Rifm>\n      </div>\n\n      <div>\n        <div>Capital first letter</div>\n        <Rifm\n          accept={/./g}\n          format={v => v.slice(0, 1).toUpperCase() + v.slice(1).toLowerCase()}\n          value={capitalized}\n          onChange={setCapitalized}\n        >\n          {renderInput}\n        </Rifm>\n      </div>\n\n      <div>\n        <div>Allow latin letters only</div>\n        <Rifm\n          accept={/[a-zA-Z]/g}\n          format={v => (v.match(/[a-zA-Z]/g) || []).join('')}\n          value={latinLetters}\n          onChange={setLatinLetters}\n        >\n          {renderInput}\n        </Rifm>\n      </div>\n    </Grid>\n  );\n};\n\nif (typeof document !== 'undefined') {\n  const root = document.getElementById('root');\n  if (root) {\n    ReactDOM.render(<Example />, root);\n  }\n}\n\nexport default Example;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}